import pandas as pd
import numpy as np

data_url = "http://lib.stat.cmu.edu/datasets/boston"
raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)
data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
target = raw_df.values[1::2, 2]

df = pd.DataFrame(data)

col_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT']
for i, col_name in enumerate(col_names):
    df = df.rename(columns={i: col_name})



df_target = pd.DataFrame(target)
df_target = df_target.rename(columns={0: 'MEDV'})

X = df
y = df_target

display(X.head())
display(y.head())

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

print(len(X_train))
display(X_train.head())
print(len(X_test))
display(X_test.head())

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print(X_train_scaled[:3])
print(X_test_scaled[:3])

from sklearn.linear_model import LinearRegression

multi_reg = LinearRegression().fit(X_train_scaled, y_train)

y_train_pred = multi_reg.predict(X_train_scaled)
y_test_pred = multi_reg.predict(X_test_scaled)

print(len(y_train_pred))
print(y_train_pred[:5])

import matplotlib.pyplot as plt
%matplotlib inline

plt.scatter(X_train, y_train_pred, label='train')
plt.scatter(X_test, y_test_pred, label='test')
plt.xlabel('X')
plt.ylabel('y')
plt.show()

def residual_plot(y_train_pred, y_train, y_test_pred, y_test):
    plt.scatter(y_train_pred, y_train_pred - y_train, label='train')
    plt.scatter(y_test_pred, y_test_pred - y_test, label='test')
    plt.plot([0, 50], [0, 0], color='red')
    plt.xlabel('Pred')
    plt.ylabel('Pred - True')
    plt.legend()
    plt.show()

residual_plot(y_train_pred, y_train, y_test_pred, y_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

def get_eval_score(y_true, y_pred):
    
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2score = r2_score(y_true, y_pred)

    print(f'MAE = {mae}')
    print(f'MSE = {mse}')
    print(f'RMSE = {rmse}')
    print(f'R"SCORE = {r2score}')
    
print('訓練データスコア')
get_eval_score(y_train, y_train_pred)
print('テストデータスコア')
get_eval_score(y_test, y_test_pred)

for i, (col, coef) in enumerate(zip(col_names, multi_reg.coef_[0])):
    print(f'w{i}({col}) = {coef}')
print(f'b = {multi_reg.intercept_[0]}')

from sklearn.linear_model import Lasso

lasso = Lasso().fit(X_train_scaled, y_train)

y_train_pred = lasso.predict(X_train_scaled)
y_test_pred = lasso.predict(X_test_scaled)

y_train_pred = np.expand_dims(y_train_pred, 1)
y_test_pred = np.expand_dims(y_test_pred, 1)

print(y_train_pred[:5])
print(y_test_pred[:5])

residual_plot(y_train_pred, y_train, y_test_pred, y_test)

print('train')
get_eval_score(y_train, y_train_pred)
print('test')
get_eval_score(y_test, y_test_pred)

for i, (col, coef) in enumerate(zip(col_names, lasso.coef_)):
    print(f'w{i}({col}) = {coef}')
print(f'b = {lasso.intercept_[0]}')

lasso_change_param = Lasso(alpha=10).fit(X_train_scaled, y_train)

for i, (col, coef) in enumerate(zip(col_names, lasso_change_param.coef_)):
    print(f'w{i}({col}) = {coef}')
print(f'b = {lasso_change_param.intercept_[0]}')

from sklearn.linear_model import LassoCV

lasso_cv = LassoCV(alphas=[0.1, 0.5, 1, 5, 10]).fit(X_train_scaled, y_train)

print(f'alpha = {lasso_cv.alpha_}')
for i ,(col, coef) in enumerate(zip(col_names, lasso_cv.coef_)):
    print(f'w{i}({col}) = {coef}')
print(f'b = {lasso_cv.intercept_}')

y_train_pred = lasso_cv.predict(X_train_scaled)
y_test_pred = lasso_cv.predict(X_test_scaled)

y_train_pred = np.expand_dims(y_train_pred, 1)
y_test_pred = np.expand_dims(y_test_pred, 1)

print('train')
get_eval_score(y_train, y_train_pred)
print('test')
get_eval_score(y_test, y_test_pred)

from sklearn.linear_model import Ridge

ridge = Ridge().fit(X_train_scaled, y_train)

y_train_pred = ridge.predict(X_train_scaled)
y_test_pred = ridge.predict(X_test_scaled)

residual_plot(y_train_pred, y_train, y_test_pred, y_test)

print('train')
get_eval_score(y_train, y_train_pred)
print('test')
get_eval_score(y_test, y_test_pred)

for i, (col, coef) in enumerate(zip(col_names, ridge.coef_[0])):
    print(f'w{i}({col}) = {coef}')
print(f'b = {ridge.intercept_[0]}')

