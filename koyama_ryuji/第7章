from sklearn.datasets import load_breast_cancer

load_data = load_breast_cancer()

import pandas as pd

df = pd.DataFrame(load_data.data, columns = load_data.feature_names)
df['y'] = load_data.target

print(len(df))
print(len(df.columns))
display(df.head())

tg_df = df[['mean radius', 'mean texture', 'y']]
display(tg_df.describe())

tg_df.corr()

print(tg_df['y'].unique())

print(len(df.loc[tg_df['y']==0]))
print(len(df.loc[tg_df['y']==1]))

import matplotlib.pyplot as plt
%matplotlib inline

plt.scatter(tg_df['mean radius'], tg_df['mean texture'], c=tg_df['y'])
plt.xlabel('mean radius')
plt.ylabel('mean texture')
plt.show()

X = tg_df[['mean radius', 'mean texture']]
y = tg_df['y']

display(X)
display(y)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

print(len(X_train))
display(X_train.head())
print(len(X_test))
display(X_test.head())

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

print(X_train_scaled[:5])
print(X_test_scaled[:5])

from sklearn.linear_model import LogisticRegression

log_reg = LogisticRegression(random_state=0).fit(X_train_scaled, y_train)

y_train_pred = log_reg.predict(X_train_scaled)
y_test_pred = log_reg.predict(X_test_scaled)

print(y_train_pred[:5])
print(y_test_pred[:5])

plt.scatter(X_train['mean radius'], X_train['mean texture'], c=y_train_pred)
plt.title('Pred_Train')
plt.xlabel('mean radius')
plt.ylabel('mean texture')
plt.show()

plt.scatter(X_test['mean radius'], X_test['mean texture'], c=y_test_pred)
plt.title('Pred_Test')
plt.xlabel('mean radius')
plt.ylabel('mean texture')
plt.show()

import numpy as np 
from mlxtend.plotting import plot_decision_regions

plot_decision_regions(np.array(X_train_scaled), np.array(y_train), clf=log_reg)
plt.show()

from sklearn.svm import LinearSVC

linear_svm = LinearSVC(random_state=0).fit(X_train_scaled, y_train)

plot_decision_regions(np.array(X_train_scaled), np.array(y_train), clf=linear_svm)
plt.show()

from sklearn.svm import SVC

kernel_svm = SVC(kernel='rbf', random_state=0).fit(X_train_scaled, y_train)
plot_decision_regions(np.array(X_train_scaled), np.array(y_train), clf=kernel_svm)
plt.show()

from sklearn.neighbors import KNeighborsClassifier

kn_cls = KNeighborsClassifier(n_neighbors=5, p=2).fit(X_train_scaled, y_train)

plot_decision_regions(np.array(X_train_scaled), np.array(y_train), clf=kn_cls)
plt.show()

from sklearn.tree import DecisionTreeClassifier

tree_cls = DecisionTreeClassifier(max_depth=3, random_state=0).fit(X_train, y_train)

plot_decision_regions(np.array(X_train), np.array(y_train), clf=tree_cls)
plt.show()

from sklearn import tree

plt.figure(figsize=(20, 8))
tree.plot_tree(tree_cls, feature_names=['mean radius', 'mean texture'], filled=True, proportion=True, fontsize=8)
plt.show()

from sklearn.ensemble import RandomForestClassifier

rf_cls = RandomForestClassifier(max_depth=3, random_state=0).fit(X_train, y_train)

plot_decision_regions(np.array(X_train), np.array(y_train), clf=rf_cls)
plt.show()

from sklearn.datasets import make_circles

X_circle, y_circle = make_circles(random_state=42, n_samples=100, noise=0.1, factor=0.3)

plt.scatter(X_circle[:, 0], X_circle[:, 1], c=y_circle)
plt.show()

models = {'Logistic Regression': LogisticRegression(),
         'Linear SVM': LinearSVC(random_state=0),
         'Kernel SVM': SVC(kernel='rbf', random_state=0),
         'K Neighbors': KNeighborsClassifier(),
         'Decision Tree': DecisionTreeClassifier(max_depth=3, random_state=0),
         'Random Forest': RandomForestClassifier(max_depth=3, random_state=0)}

import matplotlib.gridspec as gridspec
import itertools

gs = gridspec.GridSpec(2, 3)
fig = plt.figure(figsize=(12, 6))

for model_name, num in zip(models.keys(), itertools.product([0, 1, 2], repeat=2)):
    
    model = models[model_name].fit(X_circle, y_circle)
    ax = plt.subplot(gs[num[0], num[1]])
    fig = plot_decision_regions(X_circle, y_circle, clf=model)
    plt.title(model_name)
    
plt.tight_layout()
plt.show()